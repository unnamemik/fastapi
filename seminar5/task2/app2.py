# –ó–∞–¥–∞–Ω–∏–µ ‚Ññ2
# üìå –°–æ–∑–¥–∞—Ç—å API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ñ–∏–ª—å–º–æ–≤ –ø–æ –∂–∞–Ω—Ä—É. –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ
# –∏–º–µ—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ª—É—á–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ñ–∏–ª—å–º–æ–≤ –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–º—É –∂–∞–Ω—Ä—É.
# üìå –°–æ–∑–¥–∞–π—Ç–µ –º–æ–¥—É–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ —Å–µ—Ä–≤–µ—Ä –∏ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—é.
# üìå –°–æ–∑–¥–∞–π—Ç–µ –∫–ª–∞—Å—Å Movie —Å –ø–æ–ª—è–º–∏ id, title, description –∏ genre.
# üìå –°–æ–∑–¥–∞–π—Ç–µ —Å–ø–∏—Å–æ–∫ movies –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∏–ª—å–º–æ–≤.
# üìå –°–æ–∑–¥–∞–π—Ç–µ –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ñ–∏–ª—å–º–æ–≤ –ø–æ –∂–∞–Ω—Ä—É (–º–µ—Ç–æ–¥ GET).
# üìå –†–µ–∞–ª–∏–∑—É–π—Ç–µ –≤–∞–ª–∏–¥–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞ –∏ –æ—Ç–≤–µ—Ç–∞.



import logging
from fastapi import FastAPI
from task2.models import MoviesBase, Movies, Base, engine, db2

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

Base.metadata.create_all(bind=engine)

app2 = FastAPI()


@app2.get("/movies/")
async def read_root():
    res = []
    logger.info('–û—Ç—Ä–∞–±–æ—Ç–∞–ª GET –∑–∞–ø—Ä–æ—Å.')
    movies = db2.query(MoviesBase).all()
    for movie in movies:
        res.append(
            f"  movie_id: {movie.movie_id}, title: {movie.title}, description: {movie.description}, genre: {movie.genre}  ")
    return res


@app2.get("/movies/{genre}")
async def read_root(genre: str):
    res = []
    logger.info('–û—Ç—Ä–∞–±–æ—Ç–∞–ª GET –∑–∞–ø—Ä–æ—Å.')
    movies = db2.query(MoviesBase).filter(MoviesBase.genre == genre).all()
    for movie in movies:
        res.append([movie.movie_id, movie.title])
    return f"Movie list:  movies: {res}"


@app2.post("/movies/{movie_id}")
async def create_item(movie_id: int, movie: Movies):
    logger.info('–û—Ç—Ä–∞–±–æ—Ç–∞–ª POST –∑–∞–ø—Ä–æ—Å.')
    movies = db2.query(MoviesBase).filter(MoviesBase.movie_id == movie_id).all()
    for movie in movies:
        if movie.movie_id == movie_id:
            return f'Movie already exist!'
    else:
        movie = MoviesBase(movie_id=movie.movie_id, title=movie.title, description=movie.description, genre=movie.genre,
                           is_del=False)
        db2.add(movie)
        db2.commit()
        return f"Movie:  movie_id: {movie.movie_id}, title: {movie.title}, description: {movie.description}, genre: {movie.genre}"


@app2.put("/movies/{movie_id}")
async def update_item(movie_id: int, movie_upd: Movies):
    logger.info(f'–û—Ç—Ä–∞–±–æ—Ç–∞–ª PUT –∑–∞–ø—Ä–æ—Å –¥–ª—è movie id = {movie_id}.')
    movie = db2.query(MoviesBase).filter(MoviesBase.movie_id == movie_id).first()
    movie.title = movie_upd.title
    movie.description = movie_upd.description
    movie.status = movie_upd.status
    db2.commit()
    return {"movie_id": movie_id, "movie": movie_upd}


@app2.delete("/movies/{movie_id}")
async def delete_item(movie_id: int):
    logger.info(f'–û—Ç—Ä–∞–±–æ—Ç–∞–ª DELETE –∑–∞–ø—Ä–æ—Å –¥–ª—è movie id = {movie_id}.')
    movies = db2.query(MoviesBase).filter(MoviesBase.movie_id == movie_id).all()
    for movie in movies:
        db2.delete(movie)
        db2.commit()
    return {"movie_id": movie_id}
